import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './NotificationDropdown.module.css';
import API_ENDPOINTS from '../../utils/constants';
import { Circles } from 'react-loader-spinner';
import { formatRelativeTime } from '../../utils/formatRelativeTime';
import bell from '../../assets/chat/notification_bell_26.svg';

const NotificationDropdown = ({ userId }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(0);
  const [hasMore, setHasMore] = useState(true);

  const dropdownRef = useRef(null);
  const navigate = useNavigate();

  // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú ÎìúÎ°≠Îã§Ïö¥ Îã´Í∏∞
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Í∞úÏàò Ï°∞Ìöå
  const fetchUnreadCount = async () => {
    try {
      const response = await fetch(`${API_ENDPOINTS.NOTI}/unread-count`, {
        headers: {
          'User-Id': userId,
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
        }
      });
      if (response.ok) {
        const count = await response.json();
        setUnreadCount(count);
      }
    } catch (error) {
      console.error('ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Í∞úÏàò Ï°∞Ìöå Ïã§Ìå®:', error);
      // Í∞úÎ∞úÏö© ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞
      setUnreadCount(3);
    }
  };

  // ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå
  const fetchNotifications = async (page = 0, append = false) => {
    setLoading(true);
    try {
      const response = await fetch(`${API_ENDPOINTS.NOTI}/all?page=${page}&size=5`, {
        headers: {
          'User-Id': userId,
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (append) {
          setNotifications(prev => [...prev, ...data]);
        } else {
          setNotifications(data);
        }
        setHasMore(data.length === 5);
        setCurrentPage(page);
      } else {
        setHasMore(false);
      }
    } catch (error) {
      console.error('ÏïåÎ¶º Ï°∞Ìöå Ïã§Ìå®:', error);
      setHasMore(false);
    }
    setLoading(false);
  };

  // ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
  const markAsRead = async (notificationId) => {
    try {
      const response = await fetch(`${API_ENDPOINTS.NOTI}/${notificationId}/read`, {
        method: 'POST',
        headers: {
          'User-Id': userId,
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
        }
      });
      
      if (response.ok) {
        setNotifications(prev => 
          prev.map(notif => 
            notif.id === notificationId ? { ...notif, isRead: true } : notif
          )
        );
        setUnreadCount(prev => Math.max(0, prev - 1));
      }
    } catch (error) {
      console.error('ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      // Î°úÏª¨ ÏÉÅÌÉúÎßå ÏóÖÎç∞Ïù¥Ìä∏
      setNotifications(prev => 
        prev.map(notif => 
          notif.id === notificationId ? { ...notif, isRead: true } : notif
        )
      );
      setUnreadCount(prev => Math.max(0, prev - 1));
    }
  };

  const handleNotificationClick = async (notification) => {
    if (!notification.isRead) {
      await markAsRead(notification.id);
    }
    if (notification.relatedUrl) {
      navigate(notification.relatedUrl);
      setIsOpen(false);
    }
  };


  // Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
  const markAllAsRead = async () => {
    try {
      const response = await fetch(`${API_ENDPOINTS.NOTI}/read-all`, {
        method: 'POST',
        headers: {
          'User-Id': userId,
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
        }
      });
      
      if (response.ok) {
        setNotifications(prev => prev.map(notif => ({ ...notif, isRead: true })));
        setUnreadCount(0);
      }
    } catch (error) {
      console.error('Ï†ÑÏ≤¥ ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      setNotifications(prev => prev.map(notif => ({ ...notif, isRead: true })));
      setUnreadCount(0);
    }
  };

  // ÏïåÎ¶º ÏÇ≠Ï†ú
  const deleteNotification = async (notificationId) => {
    try {
      const response = await fetch(`${API_ENDPOINTS.NOTI}/${notificationId}`, {
        method: 'DELETE',
        headers: {
          'User-Id': userId,
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
        }
      });
      
      if (response.ok) {
        const deletedNotif = notifications.find(n => n.id === notificationId);
        setNotifications(prev => prev.filter(notif => notif.id !== notificationId));
        if (deletedNotif && !deletedNotif.isRead) {
          setUnreadCount(prev => Math.max(0, prev - 1));
        }
      }
    } catch (error) {
      console.error('ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      const deletedNotif = notifications.find(n => n.id === notificationId);
      setNotifications(prev => prev.filter(notif => notif.id !== notificationId));
      if (deletedNotif && !deletedNotif.isRead) {
        setUnreadCount(prev => Math.max(0, prev - 1));
      }
    }
  };

  // ÎìúÎ°≠Îã§Ïö¥ ÌÜ†Í∏Ä
  const toggleDropdown = () => {
    setIsOpen(!isOpen);
    if (!isOpen) {
      fetchNotifications(0);
    }
  };

  // Îçî Î≥¥Í∏∞
  const loadMore = () => {
    if (!loading && hasMore) {
      fetchNotifications(currentPage + 1, true);
    }
  };

  // ÏïåÎ¶º ÌÉÄÏûÖÎ≥Ñ ÏïÑÏù¥ÏΩò
  const getNotificationIcon = (type) => {
    switch (type) {
      case 'CHAT_MESSAGE':
        return 'üí¨';
      case 'FRIEND_REQUEST':
        return 'üë•';
      case 'SYSTEM':
        return '‚öôÔ∏è';
      default:
        return 'üì¢';
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Í∞úÏàò Ï°∞Ìöå
  useEffect(() => {
    if (userId) {
      fetchUnreadCount();
      // 30Ï¥àÎßàÎã§ ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Í∞úÏàò Í∞±Ïã†
      const interval = setInterval(fetchUnreadCount, 30000);
      return () => clearInterval(interval);
    }
  }, [userId]);

  return (
    <div className={styles.notificationContainer} ref={dropdownRef}>
      {/* ÏïåÎ¶º ÏïÑÏù¥ÏΩò */}
      <button className={styles.notificationButton} onClick={toggleDropdown}>
        <img src={bell}/>
        {unreadCount > 0 && (
          <span className={styles.badge}>
            {unreadCount > 99 ? '99+' : unreadCount}
          </span>
        )}
      </button>

      {/* ÎìúÎ°≠Îã§Ïö¥ */}
      {isOpen && (
        <div className={styles.dropdown}>
          {/* Ìó§Îçî */}
          <div className={styles.dropdownHeader}>
            <h3>ÏïåÎ¶º</h3>
            {unreadCount > 0 && (
              <button onClick={markAllAsRead} className={styles.markAllButton}>
                Î™®Îëê ÏùΩÏùå
              </button>
            )}
          </div>

          {/* ÏïåÎ¶º Î™©Î°ù */}
          <div className={styles.notificationList}>
            {loading && notifications.length === 0 ? (
              <div className={styles.loading}>Î°úÎî© Ï§ë...</div>
            ) : notifications.length === 0 ? (
              <div className={styles.empty}>ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§</div>
            ) : (
              <>
                {notifications.map((notification) => (
                  <div
                    key={notification.id}
                    className={`${styles.notificationItem} ${
                      !notification.isRead ? styles.unread : ''
                    }`}
                  >
                    <div className={styles.notificationContent}>
                      <div className={styles.notificationHeader}>
                        <span className={styles.icon}>
                          {getNotificationIcon(notification.type)}
                        </span>
                        <span className={styles.time}>
                          {formatRelativeTime(notification.createdAt)}
                        </span>
                        {!notification.isRead && (
                          <span className={styles.unreadDot}></span>
                        )}
                      </div>
                      <p 
                        className={styles.message}
                        onClick={() => handleNotificationClick(notification)}
                      >
                        {notification.message}
                      </p>
                    </div>
                    <button
                      className={styles.deleteButton}
                      onClick={() => deleteNotification(notification.id)}
                    >
                      √ó
                    </button>
                  </div>
                ))}
                
                {hasMore && (
                  <button 
                    className={styles.loadMoreButton}
                    onClick={loadMore}
                    disabled={loading}
                  >
                    {loading ? <Circles /> : 'Îçî Î≥¥Í∏∞'}
                  </button>
                )}
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default NotificationDropdown;